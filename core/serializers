from rest_framework import serializers
from django.contrib.auth import get_user_model
from .models import Client, Project

User = get_user_model()

class ProjectNestedSerializer(serializers.ModelSerializer):
    class Meta:
        model = Project
        fields = ('id', 'project_name')


class ClientSerializer(serializers.ModelSerializer):
    projects = ProjectNestedSerializer(many=True, read_only=True)
    created_by = serializers.StringRelatedField()

    class Meta:
        model = Client
        fields = ('id', 'client_name', 'projects', 'created_at', 'created_by', 'updated_at')


class ClientCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Client
        fields = ('id', 'client_name')

    def create(self, validated_data):
        user = self.context['request'].user
        return Client.objects.create(created_by=user, **validated_data)


class ProjectCreateSerializer(serializers.ModelSerializer):
    users = serializers.PrimaryKeyRelatedField(queryset=User.objects.all(), many=True)

    class Meta:
        model = Project
        fields = ('id', 'project_name', 'users')

    def create(self, validated_data):
        users = validated_data.pop('users', [])
        client = self.context['client']
        request_user = self.context['request'].user
        project = Project.objects.create(client=client, created_by=request_user, **validated_data)
        project.users.set(users)
        return project


class ProjectSerializer(serializers.ModelSerializer):
    client = serializers.StringRelatedField()
    users = serializers.StringRelatedField(many=True)
    created_by = serializers.StringRelatedField()

    class Meta:
        model = Project
        fields = ('id', 'project_name', 'client', 'users', 'created_at', 'created_by')
